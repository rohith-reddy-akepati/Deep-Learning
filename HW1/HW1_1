{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "16e90a47-6439-4e31-ab1b-d24eca0843c8",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import torch\n",
    "from torch import nn, optim\n",
    "from torch.nn import functional as F\n",
    "from torch.utils.data import TensorDataset, DataLoader\n",
    "import torch.utils.data as Data\n",
    "from torch.autograd import Variable\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "import numpy as np\n",
    "import math\n",
    "\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "64dbb9f7-0d4f-449f-bfb1-60332644ff2f",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "device(type='cuda')"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "device = torch.device(\"cuda\") if torch.cuda.is_available() else torch.device(\"cpu\")\n",
    "device"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b63ff217-5644-4ee6-99e3-049f25a4f8f3",
   "metadata": {},
   "source": [
    "HW1 : 1.1 Simulate a Function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b9141338-731d-4016-ac09-9cda07efe82e",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 2000x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sequential(\n",
      "  (0): Linear(in_features=1, out_features=5, bias=True)\n",
      "  (1): ReLU()\n",
      "  (2): Linear(in_features=5, out_features=10, bias=True)\n",
      "  (3): ReLU()\n",
      "  (4): Linear(in_features=10, out_features=10, bias=True)\n",
      "  (5): ReLU()\n",
      "  (6): Linear(in_features=10, out_features=10, bias=True)\n",
      "  (7): ReLU()\n",
      "  (8): Linear(in_features=10, out_features=10, bias=True)\n",
      "  (9): ReLU()\n",
      "  (10): Linear(in_features=10, out_features=10, bias=True)\n",
      "  (11): ReLU()\n",
      "  (12): Linear(in_features=10, out_features=5, bias=True)\n",
      "  (13): ReLU()\n",
      "  (14): Linear(in_features=5, out_features=1, bias=True)\n",
      ")\n",
      "Parameters:  571\n",
      "Train Epoch: 100 [0/48000 (0%)]\tLoss: 0.000298\n",
      "Train Epoch: 100 [16000/48000 (33%)]\tLoss: 0.000398\n",
      "Train Epoch: 100 [32000/48000 (67%)]\tLoss: 0.000394\n",
      "Training Done!!!\n",
      " ****************************************************************************************************\n",
      "Sequential(\n",
      "  (0): Linear(in_features=1, out_features=10, bias=True)\n",
      "  (1): ReLU()\n",
      "  (2): Linear(in_features=10, out_features=18, bias=True)\n",
      "  (3): ReLU()\n",
      "  (4): Linear(in_features=18, out_features=15, bias=True)\n",
      "  (5): ReLU()\n",
      "  (6): Linear(in_features=15, out_features=4, bias=True)\n",
      "  (7): ReLU()\n",
      "  (8): Linear(in_features=4, out_features=1, bias=True)\n",
      ")\n",
      "Parameters:  572\n",
      "Train Epoch: 100 [0/48000 (0%)]\tLoss: 0.011615\n",
      "Train Epoch: 100 [16000/48000 (33%)]\tLoss: 0.007603\n",
      "Train Epoch: 100 [32000/48000 (67%)]\tLoss: 0.007517\n",
      "Training Done!!!\n",
      " ****************************************************************************************************\n",
      "Sequential(\n",
      "  (0): Linear(in_features=1, out_features=190, bias=True)\n",
      "  (1): ReLU()\n",
      "  (2): Linear(in_features=190, out_features=1, bias=True)\n",
      ")\n",
      "Parameters:  571\n",
      "Train Epoch: 100 [0/48000 (0%)]\tLoss: 0.000649\n",
      "Train Epoch: 100 [16000/48000 (33%)]\tLoss: 0.000457\n",
      "Train Epoch: 100 [32000/48000 (67%)]\tLoss: 0.000454\n",
      "Training Done!!!\n",
      " ****************************************************************************************************\n"
     ]
    }
   ],
   "source": [
    "def SinFunc(x_input):\n",
    "    y = (np.sin(5*math.pi*x_input))/(5*math.pi*x_input) \n",
    "    return y\n",
    "\n",
    "def SignFunc(x_input):\n",
    "    y = np.sign(np.sin(5*math.pi*x_input))\n",
    "    return y\n",
    "\n",
    "X = np.linspace(1e-6, 1, 60000)\n",
    "# y =  SignFunc(X)\n",
    "y =  SinFunc(X)\n",
    "\n",
    "X = X.reshape(-1,1)\n",
    "y = y.reshape(-1,1)\n",
    "\n",
    "fig, ax = plt.subplots(1,2,figsize=(20,4))\n",
    "ax[0].plot(X, SinFunc(X))\n",
    "ax[0].set_title('Sin(5*pi*x)/(5*pi*x) plot')\n",
    "ax[1].plot(X, SignFunc(X))\n",
    "ax[1].set_title('Sgn(Sin(5*pi*x)) plot')\n",
    "plt.show()\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X,y,random_state=42,test_size=0.2)\n",
    "# print(X_train.shape, X_test.shape, y_train.shape, y_test.shape)\n",
    "\n",
    "model0 = torch.nn.Sequential(\n",
    "            nn.Linear(1, 5),\n",
    "            nn.ReLU(),\n",
    "            nn.Linear(5, 10),\n",
    "            nn.ReLU(),\n",
    "            nn.Linear(10, 10),\n",
    "            nn.ReLU(),\n",
    "            nn.Linear(10, 10),\n",
    "            nn.ReLU(),\n",
    "            nn.Linear(10, 10),\n",
    "            nn.ReLU(),\n",
    "            nn.Linear(10, 10),\n",
    "            nn.ReLU(),\n",
    "            nn.Linear(10, 5),\n",
    "            nn.ReLU(),\n",
    "            nn.Linear(5, 1),\n",
    "        )\n",
    "\n",
    "model1 = torch.nn.Sequential(\n",
    "            nn.Linear(1, 10),\n",
    "            nn.ReLU(),\n",
    "            nn.Linear(10, 18),\n",
    "            nn.ReLU(),\n",
    "            nn.Linear(18, 15),\n",
    "            nn.ReLU(),\n",
    "            nn.Linear(15, 4),\n",
    "            nn.ReLU(),\n",
    "            nn.Linear(4,1)\n",
    "        )\n",
    "\n",
    "model2 = torch.nn.Sequential(\n",
    "            nn.Linear(1, 190),\n",
    "            nn.ReLU(),\n",
    "            nn.Linear(190,1)\n",
    "        )\n",
    "\n",
    "models = [model0, model1, model2]\n",
    "\n",
    "BATCH_SIZE=32\n",
    "LEARNING_RATE = 1e-2\n",
    "MAX_EPOCHS = 100\n",
    "\n",
    "optimizers = []\n",
    "criterions = []\n",
    "\n",
    "for model in models:\n",
    "    model.train()\n",
    "    criterions.append(nn.MSELoss())\n",
    "    optimizers.append(optim.SGD(model.parameters(), lr=LEARNING_RATE))\n",
    "    \n",
    "\n",
    "training_samples = Data.TensorDataset(torch.from_numpy(X_train), torch.from_numpy(y_train))\n",
    "train_data_loader = Data.DataLoader(training_samples, batch_size=BATCH_SIZE, shuffle=True)\n",
    "\n",
    "test_samples = Data.TensorDataset(torch.from_numpy(X_test), torch.from_numpy(y_test))\n",
    "test_data_loader = Data.DataLoader(test_samples, batch_size=BATCH_SIZE, shuffle=True)\n",
    "\n",
    "model_loss = []\n",
    "\n",
    "for model,optimizer,criterion in zip(models,optimizers,criterions):\n",
    "    print(model)\n",
    "    pytorch_total_params = sum(p.numel() for p in model.parameters())\n",
    "    print(\"Parameters: \",pytorch_total_params)\n",
    "    \n",
    "    train_loss = []\n",
    "    \n",
    "    for epoch in range(MAX_EPOCHS):\n",
    "        avg_loss=[]\n",
    "        correct = 0\n",
    "        for batch_idx, (data, target) in enumerate(train_data_loader):\n",
    "            data, target = Variable(data), Variable(target)\n",
    "            \n",
    "            optimizer.zero_grad()\n",
    "            output = model(data.float())\n",
    "            loss = criterion(output, target.float())\n",
    "            \n",
    "            #print(batch_idx, loss.data[0])\n",
    "            loss.backward()\n",
    "            \n",
    "            optimizer.step()\n",
    "            \n",
    "            avg_loss.append(loss.item())\n",
    "            #correct += (output == target.float()).sum()\n",
    "                \n",
    "            #if(epoch+1)%200==0 and batch_idx%100==0:\n",
    "            if (epoch+1)%100==0 and batch_idx%500==0:\n",
    "                print('Train Epoch: {} [{}/{} ({:.0f}%)]\\tLoss: {:.6f}'.format(epoch+1, batch_idx * len(data), len(train_data_loader.dataset),100. * batch_idx / len(train_data_loader), np.average(avg_loss)))\n",
    "\n",
    "        train_loss.append(np.average(avg_loss))\n",
    "        \n",
    "    model_loss.append(train_loss)\n",
    "    print(\"Training Done!!!\\n\",\"*\"*100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "dd28d4c0-6a9e-4107-94d0-6b092930218c",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 2000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(1,2,figsize=(20,6))\n",
    "\n",
    "Labels = ['Model0','Model1','Model2']\n",
    "Colors = ['c', 'm', 'y']\n",
    "\n",
    "ax[0].plot(np.linspace(1e-6, 1, 2000), SinFunc(np.linspace(1e-6, 1, 2000)), c='c', label='Original data')\n",
    "ax[0].set_title(\"Actuals vs Predictions\")\n",
    "\n",
    "ax[1].set_title('Loss')\n",
    "ax[1].set_yscale('log') \n",
    "for idx, model in enumerate(models):\n",
    "    \n",
    "    # plot  the predictions and the difference\n",
    "    model.eval()\n",
    "\n",
    "    prediction = model(Variable(torch.Tensor(np.linspace(1e-6, 1, 2000).reshape(-1,1))))\n",
    "    prediction = prediction.data.numpy()\n",
    "\n",
    "    ax[0].plot(np.linspace(1e-6, 1, 2000), prediction, c= Colors[idx], label=Labels[idx])\n",
    "\n",
    "    ax[1].plot(model_loss[idx], c= Colors[idx], label=Labels[idx])\n",
    "\n",
    "ax[0].legend()   \n",
    "ax[1].legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "44f5b93a-d173-4803-8a3c-a5890f284a49",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.03795383396930992,\n",
       " 0.018159049448867638,\n",
       " 0.010784571489629646,\n",
       " 0.007804998567172637,\n",
       " 0.006447991558350623,\n",
       " 0.005651513246741767,\n",
       " 0.005096861996687949,\n",
       " 0.004619554362492636,\n",
       " 0.004206786317362761,\n",
       " 0.0038334887695188322,\n",
       " 0.0035198085686036695,\n",
       " 0.0032449938187686105,\n",
       " 0.0030125964082932722,\n",
       " 0.002814212041441351,\n",
       " 0.002639875430225705,\n",
       " 0.0024793737607542426,\n",
       " 0.002344727196963504,\n",
       " 0.002208475785407548,\n",
       " 0.0020965509809708844,\n",
       " 0.001982501100127896,\n",
       " 0.0018869708025595173,\n",
       " 0.0017884115599251043,\n",
       " 0.001706854815245606,\n",
       " 0.0016281183773729328,\n",
       " 0.0015551127536067117,\n",
       " 0.0014905107753972213,\n",
       " 0.001434027359277631,\n",
       " 0.0013727247121278197,\n",
       " 0.001324083721342807,\n",
       " 0.0012739868437638506,\n",
       " 0.0012290178620023653,\n",
       " 0.0011913042152688529,\n",
       " 0.0011524876470211892,\n",
       " 0.0011137604696171669,\n",
       " 0.0010808209147847568,\n",
       " 0.0010487476347479968,\n",
       " 0.0010218798652640545,\n",
       " 0.0009882850267264682,\n",
       " 0.000964257885760162,\n",
       " 0.0009409750454554645,\n",
       " 0.0009182526333606802,\n",
       " 0.0008948602441814728,\n",
       " 0.0008754362929612398,\n",
       " 0.0008531946203438565,\n",
       " 0.0008382738884150361,\n",
       " 0.0008192188241519034,\n",
       " 0.0008037637447317441,\n",
       " 0.0007888730692211538,\n",
       " 0.0007707812006119639,\n",
       " 0.0007569710690295324,\n",
       " 0.000746228911797516,\n",
       " 0.0007330149162056235,\n",
       " 0.0007193495946994517,\n",
       " 0.0007095899752845677,\n",
       " 0.000699666838433283,\n",
       " 0.0006864506553974933,\n",
       " 0.0006774277122070392,\n",
       " 0.0006681640133998978,\n",
       " 0.0006588667450705543,\n",
       " 0.0006506062063466137,\n",
       " 0.0006419798020215239,\n",
       " 0.0006337578627183878,\n",
       " 0.0006252794897494216,\n",
       " 0.0006172485446732025,\n",
       " 0.0006112258813324539,\n",
       " 0.000604771170503227,\n",
       " 0.0005974659612984397,\n",
       " 0.0005914940454822499,\n",
       " 0.0005840840228386999,\n",
       " 0.0005793790388464307,\n",
       " 0.0005723985536800077,\n",
       " 0.0005659015328759173,\n",
       " 0.0005607534836841902,\n",
       " 0.0005550855295053528,\n",
       " 0.0005488678233911439,\n",
       " 0.0005444100813183468,\n",
       " 0.000538456793728983,\n",
       " 0.0005335115309571848,\n",
       " 0.000527536639245227,\n",
       " 0.0005229036879318301,\n",
       " 0.0005198559628915974,\n",
       " 0.0005144773475864591,\n",
       " 0.0005117419378075283,\n",
       " 0.0005054694908855406,\n",
       " 0.0005019899421701363,\n",
       " 0.0004972511618543649,\n",
       " 0.0004933414659753908,\n",
       " 0.000490536135029591,\n",
       " 0.0004857125242075805,\n",
       " 0.00048241777817505257,\n",
       " 0.00047738121755537576,\n",
       " 0.00047298538055232103,\n",
       " 0.000472128854317513,\n",
       " 0.0004673638403376875,\n",
       " 0.0004639434719089574,\n",
       " 0.0004599164305157804,\n",
       " 0.00045807996951043603,\n",
       " 0.00045528202822606547,\n",
       " 0.0004514003808775063,\n",
       " 0.00044859343080800803]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_loss"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c4bdbfbf-2eef-48d9-8f68-abcfeb435442",
   "metadata": {},
   "source": [
    "HW1 : 1.1 Train on Actual Tasks - MNIST"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "acf55fb8-040c-4f9d-8c64-a689e8c92642",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "from torchvision import datasets\n",
    "from torchvision.transforms import ToTensor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f69bb90f-da4d-4a3f-be62-ebcd75c20318",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_data = datasets.MNIST(\n",
    "    root='data',\n",
    "    train=True,\n",
    "    transform=ToTensor(),\n",
    "    download = True,\n",
    ")\n",
    "\n",
    "test_data = datasets.MNIST(\n",
    "    root='data',\n",
    "    train=False,\n",
    "    transform=ToTensor(),\n",
    "    download = False,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "5a15ada1-2448-466b-92b4-494ab3fce23c",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset MNIST\n",
      "    Number of datapoints: 60000\n",
      "    Root location: data\n",
      "    Split: Train\n",
      "    StandardTransform\n",
      "Transform: ToTensor()\n",
      "torch.Size([60000, 28, 28])\n",
      "torch.Size([60000])\n"
     ]
    }
   ],
   "source": [
    "print(train_data)\n",
    "print(train_data.data.size())\n",
    "print(train_data.targets.size())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e10a726a-8122-4ddc-b3f1-2a2e062722db",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x800 with 25 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "figure = plt.figure(figsize=(10,8))\n",
    "cols, rows = 5,5\n",
    "for i in range(1, cols*rows+1):\n",
    "    sample_idx = torch.randint(len(train_data), size=(1,)).item()\n",
    "    img, label = train_data[sample_idx]\n",
    "    figure.add_subplot(rows,cols,i)\n",
    "    plt.title(label)\n",
    "    plt.axis(\"off\")\n",
    "    plt.imshow(img.squeeze(), cmap='gray')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "bd1cb77d-4ec0-49d3-a66b-c4eb1e434307",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'train': <torch.utils.data.dataloader.DataLoader at 0x7f34e4757050>,\n",
       " 'test': <torch.utils.data.dataloader.DataLoader at 0x7f34e4754810>}"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loaders = {'train': Data.DataLoader(train_data,\n",
    "                                               batch_size=100,\n",
    "                                               shuffle=True,\n",
    "                                               num_workers=1),\n",
    "          'test': Data.DataLoader(test_data,\n",
    "                                             batch_size=100,\n",
    "                                             shuffle=True,\n",
    "                                             num_workers=1)\n",
    "          }\n",
    "\n",
    "loaders"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "d1865bc7-5957-4fb8-a2fe-94468d6ff9d1",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "class CNN2(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(CNN2, self).__init__()\n",
    "        self.conv1 = nn.Sequential(         \n",
    "            nn.Conv2d(\n",
    "                in_channels=1,              \n",
    "                out_channels=16,            \n",
    "                kernel_size=5,              \n",
    "                stride=1,                   \n",
    "                padding=2,                  \n",
    "            ),                              \n",
    "            nn.ReLU(),                      \n",
    "            nn.MaxPool2d(kernel_size=2),    \n",
    "        )\n",
    "        # fully connected layer, output 10 classes\n",
    "        self.out = nn.Linear(16 * 14 * 14, 10)\n",
    "    def forward(self, x):\n",
    "        x = self.conv1(x)\n",
    "        # flatten the output of conv2 to (batch_size, 16 * 7 * 7)\n",
    "        x = x.view(x.size(0), -1)       \n",
    "        output = self.out(x)\n",
    "        return output, x    # return x for visualization\n",
    "\n",
    "class CNN1(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(CNN1, self).__init__()\n",
    "        self.conv1 = nn.Sequential(         \n",
    "            nn.Conv2d(\n",
    "                in_channels=1,              \n",
    "                out_channels=16,            \n",
    "                kernel_size=5,              \n",
    "                stride=1,                   \n",
    "                padding=2,                  \n",
    "            ),                              \n",
    "            nn.ReLU(),                      \n",
    "            nn.MaxPool2d(kernel_size=2),    \n",
    "        )\n",
    "        self.conv2 = nn.Sequential(         \n",
    "            nn.Conv2d(16, 32, 5, 1, 2),     \n",
    "            nn.ReLU(),                      \n",
    "            nn.MaxPool2d(2),                \n",
    "        )\n",
    "        # fully connected layer, output 10 classes\n",
    "        self.out = nn.Linear(32 * 7 * 7, 10)\n",
    "    def forward(self, x):\n",
    "        x = self.conv1(x)\n",
    "        x = self.conv2(x)\n",
    "        # flatten the output of conv2 to (batch_size, 32 * 7 * 7)\n",
    "        x = x.view(x.size(0), -1)       \n",
    "        output = self.out(x)\n",
    "        return output, x    # return x for visualization\n",
    "\n",
    "class CNN0(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(CNN0, self).__init__()\n",
    "        self.conv1 = nn.Sequential(         \n",
    "            nn.Conv2d(\n",
    "                in_channels=1,              \n",
    "                out_channels=16,            \n",
    "                kernel_size=5,              \n",
    "                stride=1,                   \n",
    "                padding=2,                  \n",
    "            ),                              \n",
    "            nn.ReLU(),                      \n",
    "            nn.MaxPool2d(kernel_size=2),    \n",
    "        )\n",
    "        self.conv2 = nn.Sequential(         \n",
    "            nn.Conv2d(16, 32, 5, 1, 2),     \n",
    "            nn.ReLU(),                      \n",
    "            nn.MaxPool2d(2),                \n",
    "        )\n",
    "        self.conv3 = nn.Sequential(         \n",
    "            nn.Conv2d(32, 64, 5, 1, 2),     \n",
    "            nn.ReLU(),                      \n",
    "            nn.MaxPool2d(2),                \n",
    "        )\n",
    "        self.conv4 = nn.Sequential(         \n",
    "            nn.Conv2d(64, 128, 5, 1, 2),     \n",
    "            nn.ReLU(),                      \n",
    "            nn.MaxPool2d(2),                \n",
    "        )\n",
    "        # fully connected layer, output 10 classes\n",
    "        self.out = nn.Linear(128, 10)\n",
    "    def forward(self, x):\n",
    "        x = self.conv1(x)\n",
    "        x = self.conv2(x)\n",
    "        x = self.conv3(x)\n",
    "        x = self.conv4(x)\n",
    "        # flatten the output of conv2 to (batch_size, 128 * 1 * 1)\n",
    "        x = x.view(-1, 128)  \n",
    "        output = self.out(x)\n",
    "        return output, x    # return x for visualization\n",
    "\n",
    "class CNN3(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(CNN3, self).__init__()\n",
    "        self.conv1 = nn.Conv2d(1, 32, kernel_size=5)\n",
    "        self.conv2 = nn.Conv2d(32, 32, kernel_size=5)\n",
    "        self.conv3 = nn.Conv2d(32,64, kernel_size=5)\n",
    "        self.fc1 = nn.Linear(3*3*64, 256)\n",
    "        self.fc2 = nn.Linear(256, 10)\n",
    "\n",
    "    def forward(self, x):\n",
    "        x = F.relu(self.conv1(x))\n",
    "        #x = F.dropout(x, p=0.5, training=self.training)\n",
    "        x = F.relu(F.max_pool2d(self.conv2(x), 2))\n",
    "        x = F.dropout(x, p=0.5, training=self.training)\n",
    "        x = F.relu(F.max_pool2d(self.conv3(x),2))\n",
    "        x = F.dropout(x, p=0.5, training=self.training)\n",
    "        x = x.view(-1,3*3*64 )\n",
    "        x = F.relu(self.fc1(x))\n",
    "        x = F.dropout(x, training=self.training)\n",
    "        x = self.fc2(x)\n",
    "        return F.log_softmax(x, dim=1), x\n",
    "    \n",
    "class DNN1(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(DNN1, self).__init__()\n",
    "        self.linear1 = nn.Linear(784,250)\n",
    "        self.linear2 = nn.Linear(250,100)\n",
    "        self.linear3 = nn.Linear(100,10)\n",
    "    \n",
    "    def forward(self,X):\n",
    "        X = X.view(-1,784)\n",
    "        X = F.relu(self.linear1(X))\n",
    "        X = F.relu(self.linear2(X))\n",
    "        X = self.linear3(X)\n",
    "        return F.log_softmax(X, dim=1), X\n",
    "    \n",
    "class DNN0(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(DNN0, self).__init__()\n",
    "        self.linear1 = nn.Linear(784,100)\n",
    "        self.linear2 = nn.Linear(100,100)\n",
    "        self.linear3 = nn.Linear(100,10)       \n",
    "    \n",
    "    def forward(self,X):\n",
    "        X = X.view(-1,784)\n",
    "        X = F.relu(self.linear1(X))\n",
    "        for i in range(15):\n",
    "            X = F.relu(self.linear2(X))\n",
    "        X = self.linear3(X)\n",
    "        return F.log_softmax(X, dim=1), X\n",
    "    \n",
    "class DNN2(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(DNN2, self).__init__()\n",
    "        self.linear1 = nn.Linear(784,280)\n",
    "        self.linear2 = nn.Linear(280,10)\n",
    "    \n",
    "    def forward(self,X):\n",
    "        X = X.view(-1,784)\n",
    "        X = F.relu(self.linear1(X))\n",
    "        X = self.linear2(X)\n",
    "        return F.log_softmax(X, dim=1), X\n",
    "    \n",
    "cnn_models = [CNN0(), CNN1(), CNN2(), CNN3()]\n",
    "dnn_models = [DNN0(), DNN1(), DNN2()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "e7326b95-9486-4d81-9432-c91241b7aee9",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CNN0(\n",
      "  (conv1): Sequential(\n",
      "    (0): Conv2d(1, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n",
      "    (1): ReLU()\n",
      "    (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n",
      "  )\n",
      "  (conv2): Sequential(\n",
      "    (0): Conv2d(16, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n",
      "    (1): ReLU()\n",
      "    (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n",
      "  )\n",
      "  (conv3): Sequential(\n",
      "    (0): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n",
      "    (1): ReLU()\n",
      "    (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n",
      "  )\n",
      "  (conv4): Sequential(\n",
      "    (0): Conv2d(64, 128, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n",
      "    (1): ReLU()\n",
      "    (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n",
      "  )\n",
      "  (out): Linear(in_features=128, out_features=10, bias=True)\n",
      ")\n",
      "Epoch done[1/30], Step [200/600], Loss: 0.3410, and Accuracy: 64.495%\n",
      "Epoch done[1/30], Step [400/600], Loss: 0.0528, and Accuracy: 78.547%\n",
      "Epoch done[1/30], Step [600/600], Loss: 0.1206, and Accuracy: 83.742%\n",
      "Epoch done[3/30], Step [200/600], Loss: 0.0777, and Accuracy: 95.865%\n",
      "Epoch done[3/30], Step [400/600], Loss: 0.0500, and Accuracy: 95.868%\n",
      "Epoch done[3/30], Step [600/600], Loss: 0.3843, and Accuracy: 95.978%\n",
      "Epoch done[5/30], Step [200/600], Loss: 0.1372, and Accuracy: 96.780%\n",
      "Epoch done[5/30], Step [400/600], Loss: 0.0989, and Accuracy: 96.688%\n",
      "Epoch done[5/30], Step [600/600], Loss: 0.0345, and Accuracy: 96.695%\n",
      "Epoch done[7/30], Step [200/600], Loss: 0.0530, and Accuracy: 97.180%\n",
      "Epoch done[7/30], Step [400/600], Loss: 0.0669, and Accuracy: 97.052%\n",
      "Epoch done[7/30], Step [600/600], Loss: 0.1271, and Accuracy: 96.990%\n",
      "Epoch done[9/30], Step [200/600], Loss: 0.0846, and Accuracy: 97.415%\n",
      "Epoch done[9/30], Step [400/600], Loss: 0.0406, and Accuracy: 97.085%\n",
      "Epoch done[9/30], Step [600/600], Loss: 0.1156, and Accuracy: 97.117%\n",
      "Epoch done[11/30], Step [200/600], Loss: 0.0594, and Accuracy: 96.780%\n",
      "Epoch done[11/30], Step [400/600], Loss: 0.1289, and Accuracy: 97.150%\n",
      "Epoch done[11/30], Step [600/600], Loss: 0.0451, and Accuracy: 97.120%\n",
      "Epoch done[13/30], Step [200/600], Loss: 0.1078, and Accuracy: 97.365%\n",
      "Epoch done[13/30], Step [400/600], Loss: 0.0644, and Accuracy: 97.205%\n",
      "Epoch done[13/30], Step [600/600], Loss: 0.1045, and Accuracy: 97.185%\n",
      "Epoch done[15/30], Step [200/600], Loss: 0.1868, and Accuracy: 97.765%\n",
      "Epoch done[15/30], Step [400/600], Loss: 0.0646, and Accuracy: 97.263%\n",
      "Epoch done[15/30], Step [600/600], Loss: 0.0798, and Accuracy: 97.292%\n",
      "Epoch done[17/30], Step [200/600], Loss: 0.0318, and Accuracy: 97.445%\n",
      "Epoch done[17/30], Step [400/600], Loss: 0.0455, and Accuracy: 97.355%\n",
      "Epoch done[17/30], Step [600/600], Loss: 0.0875, and Accuracy: 97.318%\n",
      "Epoch done[19/30], Step [200/600], Loss: 0.1403, and Accuracy: 97.455%\n",
      "Epoch done[19/30], Step [400/600], Loss: 0.1981, and Accuracy: 97.455%\n",
      "Epoch done[19/30], Step [600/600], Loss: 0.0709, and Accuracy: 97.372%\n",
      "Epoch done[21/30], Step [200/600], Loss: 0.1190, and Accuracy: 97.565%\n",
      "Epoch done[21/30], Step [400/600], Loss: 0.1579, and Accuracy: 97.495%\n",
      "Epoch done[21/30], Step [600/600], Loss: 0.1259, and Accuracy: 97.493%\n",
      "Epoch done[23/30], Step [200/600], Loss: 0.0252, and Accuracy: 97.560%\n",
      "Epoch done[23/30], Step [400/600], Loss: 0.0675, and Accuracy: 97.582%\n",
      "Epoch done[23/30], Step [600/600], Loss: 0.0649, and Accuracy: 97.615%\n",
      "Epoch done[25/30], Step [200/600], Loss: 0.1025, and Accuracy: 97.785%\n",
      "Epoch done[25/30], Step [400/600], Loss: 0.0884, and Accuracy: 97.672%\n",
      "Epoch done[25/30], Step [600/600], Loss: 0.0176, and Accuracy: 97.682%\n",
      "Epoch done[27/30], Step [200/600], Loss: 0.0533, and Accuracy: 97.890%\n",
      "Epoch done[27/30], Step [400/600], Loss: 0.0080, and Accuracy: 97.692%\n",
      "Epoch done[27/30], Step [600/600], Loss: 0.0618, and Accuracy: 97.650%\n",
      "Epoch done[29/30], Step [200/600], Loss: 0.1263, and Accuracy: 97.600%\n",
      "Epoch done[29/30], Step [400/600], Loss: 0.0113, and Accuracy: 97.627%\n",
      "Epoch done[29/30], Step [600/600], Loss: 0.0892, and Accuracy: 97.635%\n",
      "Training completed!!!\n",
      " ****************************************************************************************************\n",
      "CNN1(\n",
      "  (conv1): Sequential(\n",
      "    (0): Conv2d(1, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n",
      "    (1): ReLU()\n",
      "    (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n",
      "  )\n",
      "  (conv2): Sequential(\n",
      "    (0): Conv2d(16, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n",
      "    (1): ReLU()\n",
      "    (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n",
      "  )\n",
      "  (out): Linear(in_features=1568, out_features=10, bias=True)\n",
      ")\n",
      "Epoch done[1/30], Step [200/600], Loss: 0.1169, and Accuracy: 90.265%\n",
      "Epoch done[1/30], Step [400/600], Loss: 0.1565, and Accuracy: 93.890%\n",
      "Epoch done[1/30], Step [600/600], Loss: 0.0211, and Accuracy: 95.248%\n",
      "Epoch done[3/30], Step [200/600], Loss: 0.0709, and Accuracy: 98.535%\n",
      "Epoch done[3/30], Step [400/600], Loss: 0.0693, and Accuracy: 98.510%\n",
      "Epoch done[3/30], Step [600/600], Loss: 0.0010, and Accuracy: 98.543%\n",
      "Epoch done[5/30], Step [200/600], Loss: 0.0733, and Accuracy: 98.670%\n",
      "Epoch done[5/30], Step [400/600], Loss: 0.0511, and Accuracy: 98.722%\n",
      "Epoch done[5/30], Step [600/600], Loss: 0.0090, and Accuracy: 98.755%\n",
      "Epoch done[7/30], Step [200/600], Loss: 0.0102, and Accuracy: 98.915%\n",
      "Epoch done[7/30], Step [400/600], Loss: 0.0129, and Accuracy: 98.907%\n",
      "Epoch done[7/30], Step [600/600], Loss: 0.0025, and Accuracy: 98.777%\n",
      "Epoch done[9/30], Step [200/600], Loss: 0.0536, and Accuracy: 98.730%\n",
      "Epoch done[9/30], Step [400/600], Loss: 0.0147, and Accuracy: 98.845%\n",
      "Epoch done[9/30], Step [600/600], Loss: 0.1132, and Accuracy: 98.772%\n",
      "Epoch done[11/30], Step [200/600], Loss: 0.0081, and Accuracy: 99.365%\n",
      "Epoch done[11/30], Step [400/600], Loss: 0.0494, and Accuracy: 99.160%\n",
      "Epoch done[11/30], Step [600/600], Loss: 0.0572, and Accuracy: 99.070%\n",
      "Epoch done[13/30], Step [200/600], Loss: 0.0036, and Accuracy: 99.155%\n",
      "Epoch done[13/30], Step [400/600], Loss: 0.0636, and Accuracy: 99.093%\n",
      "Epoch done[13/30], Step [600/600], Loss: 0.0010, and Accuracy: 99.073%\n",
      "Epoch done[15/30], Step [200/600], Loss: 0.0118, and Accuracy: 99.035%\n",
      "Epoch done[15/30], Step [400/600], Loss: 0.0282, and Accuracy: 98.953%\n",
      "Epoch done[15/30], Step [600/600], Loss: 0.0406, and Accuracy: 98.960%\n",
      "Epoch done[17/30], Step [200/600], Loss: 0.0078, and Accuracy: 99.255%\n",
      "Epoch done[17/30], Step [400/600], Loss: 0.0178, and Accuracy: 99.183%\n",
      "Epoch done[17/30], Step [600/600], Loss: 0.1414, and Accuracy: 99.158%\n",
      "Epoch done[19/30], Step [200/600], Loss: 0.0009, and Accuracy: 99.435%\n",
      "Epoch done[19/30], Step [400/600], Loss: 0.0252, and Accuracy: 99.388%\n",
      "Epoch done[19/30], Step [600/600], Loss: 0.0041, and Accuracy: 99.285%\n",
      "Epoch done[21/30], Step [200/600], Loss: 0.0083, and Accuracy: 99.150%\n",
      "Epoch done[21/30], Step [400/600], Loss: 0.0003, and Accuracy: 99.203%\n",
      "Epoch done[21/30], Step [600/600], Loss: 0.0001, and Accuracy: 99.118%\n",
      "Epoch done[23/30], Step [200/600], Loss: 0.0093, and Accuracy: 99.480%\n",
      "Epoch done[23/30], Step [400/600], Loss: 0.0024, and Accuracy: 99.453%\n",
      "Epoch done[23/30], Step [600/600], Loss: 0.1573, and Accuracy: 99.348%\n",
      "Epoch done[25/30], Step [200/600], Loss: 0.0001, and Accuracy: 99.420%\n",
      "Epoch done[25/30], Step [400/600], Loss: 0.0010, and Accuracy: 99.405%\n",
      "Epoch done[25/30], Step [600/600], Loss: 0.0435, and Accuracy: 99.322%\n",
      "Epoch done[27/30], Step [200/600], Loss: 0.0043, and Accuracy: 99.295%\n",
      "Epoch done[27/30], Step [400/600], Loss: 0.1086, and Accuracy: 99.325%\n",
      "Epoch done[27/30], Step [600/600], Loss: 0.0715, and Accuracy: 99.253%\n",
      "Epoch done[29/30], Step [200/600], Loss: 0.0000, and Accuracy: 99.385%\n",
      "Epoch done[29/30], Step [400/600], Loss: 0.0047, and Accuracy: 99.373%\n",
      "Epoch done[29/30], Step [600/600], Loss: 0.0697, and Accuracy: 99.335%\n",
      "Training completed!!!\n",
      " ****************************************************************************************************\n",
      "CNN2(\n",
      "  (conv1): Sequential(\n",
      "    (0): Conv2d(1, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n",
      "    (1): ReLU()\n",
      "    (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n",
      "  )\n",
      "  (out): Linear(in_features=3136, out_features=10, bias=True)\n",
      ")\n",
      "Epoch done[1/30], Step [200/600], Loss: 0.1358, and Accuracy: 93.455%\n",
      "Epoch done[1/30], Step [400/600], Loss: 0.0515, and Accuracy: 95.450%\n",
      "Epoch done[1/30], Step [600/600], Loss: 0.0416, and Accuracy: 96.197%\n",
      "Epoch done[3/30], Step [200/600], Loss: 0.0668, and Accuracy: 98.755%\n",
      "Epoch done[3/30], Step [400/600], Loss: 0.0246, and Accuracy: 98.733%\n",
      "Epoch done[3/30], Step [600/600], Loss: 0.0332, and Accuracy: 98.673%\n",
      "Epoch done[5/30], Step [200/600], Loss: 0.0568, and Accuracy: 99.100%\n",
      "Epoch done[5/30], Step [400/600], Loss: 0.0100, and Accuracy: 99.095%\n",
      "Epoch done[5/30], Step [600/600], Loss: 0.0061, and Accuracy: 99.090%\n",
      "Epoch done[7/30], Step [200/600], Loss: 0.0080, and Accuracy: 99.380%\n",
      "Epoch done[7/30], Step [400/600], Loss: 0.0894, and Accuracy: 99.325%\n",
      "Epoch done[7/30], Step [600/600], Loss: 0.0886, and Accuracy: 99.265%\n",
      "Epoch done[9/30], Step [200/600], Loss: 0.0094, and Accuracy: 99.560%\n",
      "Epoch done[9/30], Step [400/600], Loss: 0.0837, and Accuracy: 99.525%\n",
      "Epoch done[9/30], Step [600/600], Loss: 0.0407, and Accuracy: 99.370%\n",
      "Epoch done[11/30], Step [200/600], Loss: 0.0002, and Accuracy: 99.490%\n",
      "Epoch done[11/30], Step [400/600], Loss: 0.0004, and Accuracy: 99.495%\n",
      "Epoch done[11/30], Step [600/600], Loss: 0.0029, and Accuracy: 99.493%\n",
      "Epoch done[13/30], Step [200/600], Loss: 0.0301, and Accuracy: 99.630%\n",
      "Epoch done[13/30], Step [400/600], Loss: 0.0012, and Accuracy: 99.640%\n",
      "Epoch done[13/30], Step [600/600], Loss: 0.0001, and Accuracy: 99.597%\n",
      "Epoch done[15/30], Step [200/600], Loss: 0.0015, and Accuracy: 99.660%\n",
      "Epoch done[15/30], Step [400/600], Loss: 0.0039, and Accuracy: 99.603%\n",
      "Epoch done[15/30], Step [600/600], Loss: 0.0474, and Accuracy: 99.583%\n",
      "Epoch done[17/30], Step [200/600], Loss: 0.0398, and Accuracy: 99.685%\n",
      "Epoch done[17/30], Step [400/600], Loss: 0.0185, and Accuracy: 99.655%\n",
      "Epoch done[17/30], Step [600/600], Loss: 0.0705, and Accuracy: 99.680%\n",
      "Epoch done[19/30], Step [200/600], Loss: 0.0789, and Accuracy: 99.630%\n",
      "Epoch done[19/30], Step [400/600], Loss: 0.0001, and Accuracy: 99.632%\n",
      "Epoch done[19/30], Step [600/600], Loss: 0.0003, and Accuracy: 99.665%\n",
      "Epoch done[21/30], Step [200/600], Loss: 0.0098, and Accuracy: 99.820%\n",
      "Epoch done[21/30], Step [400/600], Loss: 0.0099, and Accuracy: 99.775%\n",
      "Epoch done[21/30], Step [600/600], Loss: 0.0584, and Accuracy: 99.725%\n",
      "Epoch done[23/30], Step [200/600], Loss: 0.0000, and Accuracy: 99.810%\n",
      "Epoch done[23/30], Step [400/600], Loss: 0.0018, and Accuracy: 99.760%\n",
      "Epoch done[23/30], Step [600/600], Loss: 0.0454, and Accuracy: 99.727%\n",
      "Epoch done[25/30], Step [200/600], Loss: 0.0000, and Accuracy: 99.755%\n",
      "Epoch done[25/30], Step [400/600], Loss: 0.0377, and Accuracy: 99.730%\n",
      "Epoch done[25/30], Step [600/600], Loss: 0.0000, and Accuracy: 99.727%\n",
      "Epoch done[27/30], Step [200/600], Loss: 0.0000, and Accuracy: 99.760%\n",
      "Epoch done[27/30], Step [400/600], Loss: 0.0000, and Accuracy: 99.760%\n",
      "Epoch done[27/30], Step [600/600], Loss: 0.0001, and Accuracy: 99.758%\n",
      "Epoch done[29/30], Step [200/600], Loss: 0.0000, and Accuracy: 99.680%\n",
      "Epoch done[29/30], Step [400/600], Loss: 0.0009, and Accuracy: 99.690%\n",
      "Epoch done[29/30], Step [600/600], Loss: 0.0041, and Accuracy: 99.687%\n",
      "Training completed!!!\n",
      " ****************************************************************************************************\n",
      "CNN3(\n",
      "  (conv1): Conv2d(1, 32, kernel_size=(5, 5), stride=(1, 1))\n",
      "  (conv2): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1))\n",
      "  (conv3): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1))\n",
      "  (fc1): Linear(in_features=576, out_features=256, bias=True)\n",
      "  (fc2): Linear(in_features=256, out_features=10, bias=True)\n",
      ")\n",
      "Epoch done[1/30], Step [200/600], Loss: 2.3264, and Accuracy: 10.780%\n",
      "Epoch done[1/30], Step [400/600], Loss: 2.3014, and Accuracy: 10.832%\n",
      "Epoch done[1/30], Step [600/600], Loss: 2.3056, and Accuracy: 11.053%\n",
      "Epoch done[3/30], Step [200/600], Loss: 2.2983, and Accuracy: 10.970%\n",
      "Epoch done[3/30], Step [400/600], Loss: 2.2903, and Accuracy: 10.870%\n",
      "Epoch done[3/30], Step [600/600], Loss: 2.3049, and Accuracy: 11.082%\n",
      "Epoch done[5/30], Step [200/600], Loss: 2.2971, and Accuracy: 10.800%\n",
      "Epoch done[5/30], Step [400/600], Loss: 2.3038, and Accuracy: 10.752%\n",
      "Epoch done[5/30], Step [600/600], Loss: 2.3022, and Accuracy: 10.992%\n",
      "Epoch done[7/30], Step [200/600], Loss: 2.2984, and Accuracy: 11.130%\n",
      "Epoch done[7/30], Step [400/600], Loss: 2.2984, and Accuracy: 11.080%\n",
      "Epoch done[7/30], Step [600/600], Loss: 2.2926, and Accuracy: 11.153%\n",
      "Epoch done[9/30], Step [200/600], Loss: 2.2961, and Accuracy: 11.115%\n",
      "Epoch done[9/30], Step [400/600], Loss: 2.3055, and Accuracy: 10.915%\n",
      "Epoch done[9/30], Step [600/600], Loss: 2.2912, and Accuracy: 11.042%\n",
      "Epoch done[11/30], Step [200/600], Loss: 2.3023, and Accuracy: 11.360%\n",
      "Epoch done[11/30], Step [400/600], Loss: 2.3115, and Accuracy: 10.822%\n",
      "Epoch done[11/30], Step [600/600], Loss: 2.2975, and Accuracy: 10.987%\n",
      "Epoch done[13/30], Step [200/600], Loss: 2.3001, and Accuracy: 11.055%\n",
      "Epoch done[13/30], Step [400/600], Loss: 2.2991, and Accuracy: 11.053%\n",
      "Epoch done[13/30], Step [600/600], Loss: 2.3067, and Accuracy: 11.045%\n",
      "Epoch done[15/30], Step [200/600], Loss: 2.3086, and Accuracy: 10.790%\n",
      "Epoch done[15/30], Step [400/600], Loss: 2.3087, and Accuracy: 10.973%\n",
      "Epoch done[15/30], Step [600/600], Loss: 2.2995, and Accuracy: 11.047%\n",
      "Epoch done[17/30], Step [200/600], Loss: 2.2973, and Accuracy: 11.290%\n",
      "Epoch done[17/30], Step [400/600], Loss: 2.3041, and Accuracy: 11.037%\n",
      "Epoch done[17/30], Step [600/600], Loss: 2.3005, and Accuracy: 11.097%\n",
      "Epoch done[19/30], Step [200/600], Loss: 2.2949, and Accuracy: 11.145%\n",
      "Epoch done[19/30], Step [400/600], Loss: 2.3008, and Accuracy: 11.027%\n",
      "Epoch done[19/30], Step [600/600], Loss: 2.2949, and Accuracy: 11.148%\n",
      "Epoch done[21/30], Step [200/600], Loss: 2.3069, and Accuracy: 10.870%\n",
      "Epoch done[21/30], Step [400/600], Loss: 2.3022, and Accuracy: 10.935%\n",
      "Epoch done[21/30], Step [600/600], Loss: 2.2967, and Accuracy: 11.097%\n",
      "Epoch done[23/30], Step [200/600], Loss: 2.3021, and Accuracy: 11.415%\n",
      "Epoch done[23/30], Step [400/600], Loss: 2.2990, and Accuracy: 11.102%\n",
      "Epoch done[23/30], Step [600/600], Loss: 2.3069, and Accuracy: 11.178%\n",
      "Epoch done[25/30], Step [200/600], Loss: 2.2934, and Accuracy: 10.845%\n",
      "Epoch done[25/30], Step [400/600], Loss: 2.3131, and Accuracy: 11.205%\n",
      "Epoch done[25/30], Step [600/600], Loss: 2.2996, and Accuracy: 11.078%\n",
      "Epoch done[27/30], Step [200/600], Loss: 2.2966, and Accuracy: 11.565%\n",
      "Epoch done[27/30], Step [400/600], Loss: 2.2981, and Accuracy: 11.252%\n",
      "Epoch done[27/30], Step [600/600], Loss: 2.2948, and Accuracy: 11.208%\n",
      "Epoch done[29/30], Step [200/600], Loss: 2.2986, and Accuracy: 11.150%\n",
      "Epoch done[29/30], Step [400/600], Loss: 2.3126, and Accuracy: 11.328%\n",
      "Epoch done[29/30], Step [600/600], Loss: 2.2951, and Accuracy: 11.177%\n",
      "Training completed!!!\n",
      " ****************************************************************************************************\n"
     ]
    }
   ],
   "source": [
    "loss_functions = []\n",
    "optimizers = []\n",
    "num_epochs = 30\n",
    "\n",
    "for model in cnn_models:\n",
    "    model.train()\n",
    "    optimizers.append(optim.Adam(model.parameters(), lr = 0.01))\n",
    "    loss_functions.append(nn.CrossEntropyLoss())\n",
    "\n",
    "model_loss=[]\n",
    "model_accuracy=[]\n",
    "    \n",
    "for model, optimizer, loss_func in zip(cnn_models,optimizers,loss_functions):\n",
    "    print(model)\n",
    "    # Train the model\n",
    "    total_step = len(loaders['train'])\n",
    "    \n",
    "    train_loss =[]\n",
    "    train_acc = []\n",
    "    for epoch in range(num_epochs):\n",
    "        correct=0\n",
    "        b_loss=[]\n",
    "        b_acc=[]\n",
    "        for i, (images, labels) in enumerate(loaders['train']):\n",
    "            \n",
    "            # gives batch data, normalize x when iterate train_loader\n",
    "            b_x = Variable(images) # batch x\n",
    "            b_y = Variable(labels)   # batch y\n",
    "            output = model(b_x)[0]               \n",
    "            loss = loss_func(output, b_y)\n",
    "            \n",
    "            # clear gradients for this training step   \n",
    "            optimizer.zero_grad()           \n",
    "            \n",
    "            # backpropagation, compute gradients \n",
    "            loss.backward()    \n",
    "            # apply gradients             \n",
    "            optimizer.step() \n",
    "            \n",
    "            predicted = torch.max(output.data, 1)[1]\n",
    "            correct += (predicted==b_y).sum()\n",
    "            \n",
    "            b_loss.append(loss.item())\n",
    "            b_acc.append(float(correct)*100/float(100*(i+1)))\n",
    "            \n",
    "            if (i+1)%200==0 and epoch%2==0:\n",
    "                print ('Epoch done[{}/{}], Step [{}/{}], Loss: {:.4f}, and Accuracy: {:.3f}%'.format(epoch + 1, num_epochs, i + 1, total_step, b_loss[-1],b_acc[-1]))\n",
    "        train_loss.append(np.average(b_loss))\n",
    "        train_acc.append(np.average(b_acc))\n",
    "     \n",
    "    model_loss.append(train_loss)\n",
    "    model_accuracy.append(train_acc)\n",
    "    print(\"Training completed!!!\\n\",\"*\"*100)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "93bf6dab-4fbd-4a9f-895e-860364f66f11",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
